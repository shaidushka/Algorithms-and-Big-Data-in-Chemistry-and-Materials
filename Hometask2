{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMkxFDwFxtn8BcRbRNMpjpn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shaidushka/Algorithms-and-Big-Data-in-Chemistry-and-Materials/blob/main/Hometask2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hVQDi4eWxp8o"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "data = '/content/drive/MyDrive/qm9_sample.csv'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zWG9veFrx4Sd",
        "outputId": "bb7572ac-afd7-4e32-f7dc-b3652ccb337c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(data)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "bfNBic84yBrp",
        "outputId": "eb3eb5ab-fc73-42ad-a2e7-1be108aef21a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      mol_id              smiles        A        B        C      mu  alpha  \\\n",
              "0  gdb_85460    OC1CC(=O)OC11CC1  2.56798  1.54104  1.16855  4.5081  68.95   \n",
              "1  gdb_55140    NC(=O)C1CC2CC1O2  3.48438  1.31673  1.14460  4.3465  70.87   \n",
              "2  gdb_34694  N#CC1C2C3C2C2C3N12  4.06313  1.54811  1.41644  4.7928  70.69   \n",
              "3  gdb_72514   OC12COC(C=C1)C=C2  2.79725  1.77450  1.74838  2.2454  71.27   \n",
              "4  gdb_49375    N=CN1C(CC1=O)C#C  2.38691  1.40907  0.96599  4.9818  76.29   \n",
              "\n",
              "     homo    lumo     gap         r2      zpve          u0        u298  \\\n",
              "0 -0.2628  0.0135  0.2764  1073.2660  0.135441 -458.990458 -458.982402   \n",
              "1 -0.2434  0.0312  0.2746  1094.9083  0.149009 -439.095881 -439.087845   \n",
              "2 -0.2489  0.0269  0.2758   907.0829  0.114997 -379.618989 -379.612807   \n",
              "3 -0.2326 -0.0123  0.2204   881.3908  0.136878 -421.814082 -421.807077   \n",
              "4 -0.2548 -0.0246  0.2302  1182.8383  0.111296 -416.788610 -416.779972   \n",
              "\n",
              "         h298        g298      cv  \n",
              "0 -458.981458 -459.023203  30.870  \n",
              "1 -439.086901 -439.129191  30.598  \n",
              "2 -379.611863 -379.649590  25.074  \n",
              "3 -421.806132 -421.844762  29.538  \n",
              "4 -416.779028 -416.822522  30.865  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cfca09f9-7827-4477-8d53-20afab1dbb05\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mol_id</th>\n",
              "      <th>smiles</th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>mu</th>\n",
              "      <th>alpha</th>\n",
              "      <th>homo</th>\n",
              "      <th>lumo</th>\n",
              "      <th>gap</th>\n",
              "      <th>r2</th>\n",
              "      <th>zpve</th>\n",
              "      <th>u0</th>\n",
              "      <th>u298</th>\n",
              "      <th>h298</th>\n",
              "      <th>g298</th>\n",
              "      <th>cv</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>gdb_85460</td>\n",
              "      <td>OC1CC(=O)OC11CC1</td>\n",
              "      <td>2.56798</td>\n",
              "      <td>1.54104</td>\n",
              "      <td>1.16855</td>\n",
              "      <td>4.5081</td>\n",
              "      <td>68.95</td>\n",
              "      <td>-0.2628</td>\n",
              "      <td>0.0135</td>\n",
              "      <td>0.2764</td>\n",
              "      <td>1073.2660</td>\n",
              "      <td>0.135441</td>\n",
              "      <td>-458.990458</td>\n",
              "      <td>-458.982402</td>\n",
              "      <td>-458.981458</td>\n",
              "      <td>-459.023203</td>\n",
              "      <td>30.870</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>gdb_55140</td>\n",
              "      <td>NC(=O)C1CC2CC1O2</td>\n",
              "      <td>3.48438</td>\n",
              "      <td>1.31673</td>\n",
              "      <td>1.14460</td>\n",
              "      <td>4.3465</td>\n",
              "      <td>70.87</td>\n",
              "      <td>-0.2434</td>\n",
              "      <td>0.0312</td>\n",
              "      <td>0.2746</td>\n",
              "      <td>1094.9083</td>\n",
              "      <td>0.149009</td>\n",
              "      <td>-439.095881</td>\n",
              "      <td>-439.087845</td>\n",
              "      <td>-439.086901</td>\n",
              "      <td>-439.129191</td>\n",
              "      <td>30.598</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>gdb_34694</td>\n",
              "      <td>N#CC1C2C3C2C2C3N12</td>\n",
              "      <td>4.06313</td>\n",
              "      <td>1.54811</td>\n",
              "      <td>1.41644</td>\n",
              "      <td>4.7928</td>\n",
              "      <td>70.69</td>\n",
              "      <td>-0.2489</td>\n",
              "      <td>0.0269</td>\n",
              "      <td>0.2758</td>\n",
              "      <td>907.0829</td>\n",
              "      <td>0.114997</td>\n",
              "      <td>-379.618989</td>\n",
              "      <td>-379.612807</td>\n",
              "      <td>-379.611863</td>\n",
              "      <td>-379.649590</td>\n",
              "      <td>25.074</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>gdb_72514</td>\n",
              "      <td>OC12COC(C=C1)C=C2</td>\n",
              "      <td>2.79725</td>\n",
              "      <td>1.77450</td>\n",
              "      <td>1.74838</td>\n",
              "      <td>2.2454</td>\n",
              "      <td>71.27</td>\n",
              "      <td>-0.2326</td>\n",
              "      <td>-0.0123</td>\n",
              "      <td>0.2204</td>\n",
              "      <td>881.3908</td>\n",
              "      <td>0.136878</td>\n",
              "      <td>-421.814082</td>\n",
              "      <td>-421.807077</td>\n",
              "      <td>-421.806132</td>\n",
              "      <td>-421.844762</td>\n",
              "      <td>29.538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>gdb_49375</td>\n",
              "      <td>N=CN1C(CC1=O)C#C</td>\n",
              "      <td>2.38691</td>\n",
              "      <td>1.40907</td>\n",
              "      <td>0.96599</td>\n",
              "      <td>4.9818</td>\n",
              "      <td>76.29</td>\n",
              "      <td>-0.2548</td>\n",
              "      <td>-0.0246</td>\n",
              "      <td>0.2302</td>\n",
              "      <td>1182.8383</td>\n",
              "      <td>0.111296</td>\n",
              "      <td>-416.788610</td>\n",
              "      <td>-416.779972</td>\n",
              "      <td>-416.779028</td>\n",
              "      <td>-416.822522</td>\n",
              "      <td>30.865</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cfca09f9-7827-4477-8d53-20afab1dbb05')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cfca09f9-7827-4477-8d53-20afab1dbb05 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cfca09f9-7827-4477-8d53-20afab1dbb05');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-13913b96-b0d3-4dc7-a45c-7e5c5f342319\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13913b96-b0d3-4dc7-a45c-7e5c5f342319')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-13913b96-b0d3-4dc7-a45c-7e5c5f342319 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 20000,\n  \"fields\": [\n    {\n      \"column\": \"mol_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          \"gdb_52833\",\n          \"gdb_34224\",\n          \"gdb_27875\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smiles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19994,\n        \"samples\": [\n          \"CC12OC1C=CCC2=O\",\n          \"CC(=O)NC(=O)C=O\",\n          \"OC12CC3(O)C(CC13)C2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1645.1582491572549,\n        \"min\": 1.27314,\n        \"max\": 232663.7888,\n        \"num_unique_values\": 19345,\n        \"samples\": [\n          3.47489,\n          2.86702,\n          4.01043\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4711966780405124,\n        \"min\": 0.33712,\n        \"max\": 10.24473,\n        \"num_unique_values\": 18743,\n        \"samples\": [\n          1.34531,\n          1.42168,\n          0.67653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33814935948109587,\n        \"min\": 0.33118,\n        \"max\": 9.07368,\n        \"num_unique_values\": 18144,\n        \"samples\": [\n          1.13649,\n          1.23149,\n          1.10745\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mu\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5576105923849892,\n        \"min\": 0.0,\n        \"max\": 22.9605,\n        \"num_unique_values\": 16445,\n        \"samples\": [\n          4.4391,\n          0.6064,\n          1.4562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alpha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.218449180240176,\n        \"min\": 15.93,\n        \"max\": 132.47,\n        \"num_unique_values\": 3828,\n        \"samples\": [\n          69.76,\n          56.22,\n          71.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"homo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02236022487862781,\n        \"min\": -0.4286,\n        \"max\": -0.1177,\n        \"num_unique_values\": 1447,\n        \"samples\": [\n          -0.2719,\n          -0.2528,\n          -0.2821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lumo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04691445762264231,\n        \"min\": -0.175,\n        \"max\": 0.1935,\n        \"num_unique_values\": 2094,\n        \"samples\": [\n          -0.0939,\n          0.0425,\n          0.0604\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04769431256092605,\n        \"min\": 0.042,\n        \"max\": 0.6221,\n        \"num_unique_values\": 2235,\n        \"samples\": [\n          0.3508,\n          0.3525,\n          0.2512\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 279.08551513476556,\n        \"min\": 166.9728,\n        \"max\": 3197.5687,\n        \"num_unique_values\": 19970,\n        \"samples\": [\n          1049.0258,\n          925.3434,\n          1176.9335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zpve\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.033296909185874135,\n        \"min\": 0.017147,\n        \"max\": 0.273168,\n        \"num_unique_values\": 17776,\n        \"samples\": [\n          0.149134,\n          0.157483,\n          0.120367\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"u0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.179906603919115,\n        \"min\": -714.568061,\n        \"max\": -153.787612,\n        \"num_unique_values\": 19961,\n        \"samples\": [\n          -419.224618,\n          -365.037348,\n          -385.866105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"u298\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.17970085523574,\n        \"min\": -714.560153,\n        \"max\": -153.783728,\n        \"num_unique_values\": 19972,\n        \"samples\": [\n          -379.8618,\n          -436.637555,\n          -437.923101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"h298\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.179700858975686,\n        \"min\": -714.559209,\n        \"max\": -153.782784,\n        \"num_unique_values\": 19971,\n        \"samples\": [\n          -417.992733,\n          -436.990107,\n          -437.922156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"g298\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.18039598112723,\n        \"min\": -714.602138,\n        \"max\": -153.812518,\n        \"num_unique_values\": 19958,\n        \"samples\": [\n          -418.009411,\n          -423.031338,\n          -418.10865\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cv\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.03256647446303,\n        \"min\": 11.122,\n        \"max\": 45.647,\n        \"num_unique_values\": 11117,\n        \"samples\": [\n          36.062,\n          35.763,\n          28.297\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install rdkit\n",
        "!pip install pubchempy\n",
        "from rdkit import Chem\n",
        "from rdkit.Chem import Descriptors, PandasTools, MolFromSmiles\n",
        "from rdkit.ML.Descriptors import MoleculeDescriptors\n",
        "import pubchempy as pcp\n",
        "import pandas as pd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lhBAMetMyGZX",
        "outputId": "520c3edd-6e8b-49fe-f7d0-69846dd436e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting rdkit\n",
            "  Downloading rdkit-2023.9.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.4 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m34.4/34.4 MB\u001b[0m \u001b[31m37.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from rdkit) (1.25.2)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from rdkit) (9.4.0)\n",
            "Installing collected packages: rdkit\n",
            "Successfully installed rdkit-2023.9.5\n",
            "Collecting pubchempy\n",
            "  Downloading PubChemPy-1.0.4.tar.gz (29 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: pubchempy\n",
            "  Building wheel for pubchempy (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pubchempy: filename=PubChemPy-1.0.4-py3-none-any.whl size=13820 sha256=e2cd7ab253465f9c5aa58c87a10a46372aca990f1f2fb5860102d23c092783bd\n",
            "  Stored in directory: /root/.cache/pip/wheels/90/7c/45/18a0671e3c3316966ef7ed9ad2b3f3300a7e41d3421a44e799\n",
            "Successfully built pubchempy\n",
            "Installing collected packages: pubchempy\n",
            "Successfully installed pubchempy-1.0.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Преобразование SMILES в объекты молекул RDKit\n",
        "molecules = [Chem.MolFromSmiles(smiles) for smiles in df['smiles']]\n",
        "\n",
        "# Создание списка дескрипторов\n",
        "desc_list = [desc[0] for desc in Descriptors.descList]\n",
        "\n",
        "# Вычисление значений дескрипторов для каждой молекулы\n",
        "calc = MoleculeDescriptors.MolecularDescriptorCalculator(desc_list)\n",
        "desc_values = [list(calc.CalcDescriptors(mol)) for mol in molecules]\n",
        "\n",
        "# Создание нового DataFrame с дескрипторами\n",
        "desc_df = pd.DataFrame(desc_values, columns=desc_list)\n",
        "\n",
        "# Объединение с исходными DataFrame по индексу\n",
        "result_df = pd.concat([df, desc_df], axis=1)\n",
        "\n",
        "result_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "TCzy0nMhyXXL",
        "outputId": "c49ab2ed-8e40-45fd-af4b-b86257b93030"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      mol_id              smiles        A        B        C      mu  alpha  \\\n",
              "0  gdb_85460    OC1CC(=O)OC11CC1  2.56798  1.54104  1.16855  4.5081  68.95   \n",
              "1  gdb_55140    NC(=O)C1CC2CC1O2  3.48438  1.31673  1.14460  4.3465  70.87   \n",
              "2  gdb_34694  N#CC1C2C3C2C2C3N12  4.06313  1.54811  1.41644  4.7928  70.69   \n",
              "3  gdb_72514   OC12COC(C=C1)C=C2  2.79725  1.77450  1.74838  2.2454  71.27   \n",
              "4  gdb_49375    N=CN1C(CC1=O)C#C  2.38691  1.40907  0.96599  4.9818  76.29   \n",
              "\n",
              "     homo    lumo     gap  ...  fr_sulfide  fr_sulfonamd  fr_sulfone  \\\n",
              "0 -0.2628  0.0135  0.2764  ...           0             0           0   \n",
              "1 -0.2434  0.0312  0.2746  ...           0             0           0   \n",
              "2 -0.2489  0.0269  0.2758  ...           0             0           0   \n",
              "3 -0.2326 -0.0123  0.2204  ...           0             0           0   \n",
              "4 -0.2548 -0.0246  0.2302  ...           0             0           0   \n",
              "\n",
              "   fr_term_acetylene  fr_tetrazole  fr_thiazole  fr_thiocyan  fr_thiophene  \\\n",
              "0                  0             0            0            0             0   \n",
              "1                  0             0            0            0             0   \n",
              "2                  0             0            0            0             0   \n",
              "3                  0             0            0            0             0   \n",
              "4                  1             0            0            0             0   \n",
              "\n",
              "   fr_unbrch_alkane  fr_urea  \n",
              "0                 0        0  \n",
              "1                 0        0  \n",
              "2                 0        0  \n",
              "3                 0        0  \n",
              "4                 0        0  \n",
              "\n",
              "[5 rows x 227 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1c873e45-5fe2-4252-aebb-2e0c05372f7c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mol_id</th>\n",
              "      <th>smiles</th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>mu</th>\n",
              "      <th>alpha</th>\n",
              "      <th>homo</th>\n",
              "      <th>lumo</th>\n",
              "      <th>gap</th>\n",
              "      <th>...</th>\n",
              "      <th>fr_sulfide</th>\n",
              "      <th>fr_sulfonamd</th>\n",
              "      <th>fr_sulfone</th>\n",
              "      <th>fr_term_acetylene</th>\n",
              "      <th>fr_tetrazole</th>\n",
              "      <th>fr_thiazole</th>\n",
              "      <th>fr_thiocyan</th>\n",
              "      <th>fr_thiophene</th>\n",
              "      <th>fr_unbrch_alkane</th>\n",
              "      <th>fr_urea</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>gdb_85460</td>\n",
              "      <td>OC1CC(=O)OC11CC1</td>\n",
              "      <td>2.56798</td>\n",
              "      <td>1.54104</td>\n",
              "      <td>1.16855</td>\n",
              "      <td>4.5081</td>\n",
              "      <td>68.95</td>\n",
              "      <td>-0.2628</td>\n",
              "      <td>0.0135</td>\n",
              "      <td>0.2764</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>gdb_55140</td>\n",
              "      <td>NC(=O)C1CC2CC1O2</td>\n",
              "      <td>3.48438</td>\n",
              "      <td>1.31673</td>\n",
              "      <td>1.14460</td>\n",
              "      <td>4.3465</td>\n",
              "      <td>70.87</td>\n",
              "      <td>-0.2434</td>\n",
              "      <td>0.0312</td>\n",
              "      <td>0.2746</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>gdb_34694</td>\n",
              "      <td>N#CC1C2C3C2C2C3N12</td>\n",
              "      <td>4.06313</td>\n",
              "      <td>1.54811</td>\n",
              "      <td>1.41644</td>\n",
              "      <td>4.7928</td>\n",
              "      <td>70.69</td>\n",
              "      <td>-0.2489</td>\n",
              "      <td>0.0269</td>\n",
              "      <td>0.2758</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>gdb_72514</td>\n",
              "      <td>OC12COC(C=C1)C=C2</td>\n",
              "      <td>2.79725</td>\n",
              "      <td>1.77450</td>\n",
              "      <td>1.74838</td>\n",
              "      <td>2.2454</td>\n",
              "      <td>71.27</td>\n",
              "      <td>-0.2326</td>\n",
              "      <td>-0.0123</td>\n",
              "      <td>0.2204</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>gdb_49375</td>\n",
              "      <td>N=CN1C(CC1=O)C#C</td>\n",
              "      <td>2.38691</td>\n",
              "      <td>1.40907</td>\n",
              "      <td>0.96599</td>\n",
              "      <td>4.9818</td>\n",
              "      <td>76.29</td>\n",
              "      <td>-0.2548</td>\n",
              "      <td>-0.0246</td>\n",
              "      <td>0.2302</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 227 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c873e45-5fe2-4252-aebb-2e0c05372f7c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1c873e45-5fe2-4252-aebb-2e0c05372f7c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1c873e45-5fe2-4252-aebb-2e0c05372f7c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-07c40f29-9196-4c5f-888c-6f6635850ffb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07c40f29-9196-4c5f-888c-6f6635850ffb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-07c40f29-9196-4c5f-888c-6f6635850ffb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "result_df"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4gNWZdWry4Ly",
        "outputId": "60555411-11ff-4dc6-f875-562dbd7e4e77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 20000 entries, 0 to 19999\n",
            "Columns: 227 entries, mol_id to fr_urea\n",
            "dtypes: float64(121), int64(104), object(2)\n",
            "memory usage: 34.6+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pubchempy as pcp\n",
        "import numpy as np\n",
        "from rdkit import Chem\n",
        "from rdkit.Chem import rdMolDescriptors\n",
        "from rdkit.Chem import Descriptors\n",
        "!pip install 'mordred[full]'\n",
        "from mordred import Calculator, descriptors"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-XyUTpmvy95d",
        "outputId": "76111385-7c10-40eb-d92d-29eee62dcbb3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting mordred[full]\n",
            "  Downloading mordred-1.2.0.tar.gz (128 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m128.8/128.8 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: six==1.* in /usr/local/lib/python3.10/dist-packages (from mordred[full]) (1.16.0)\n",
            "Requirement already satisfied: numpy==1.* in /usr/local/lib/python3.10/dist-packages (from mordred[full]) (1.25.2)\n",
            "Collecting networkx==2.* (from mordred[full])\n",
            "  Downloading networkx-2.8.8-py3-none-any.whl (2.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m8.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from mordred[full]) (2.0.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from mordred[full]) (4.66.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->mordred[full]) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->mordred[full]) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->mordred[full]) (2024.1)\n",
            "Building wheels for collected packages: mordred\n",
            "  Building wheel for mordred (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for mordred: filename=mordred-1.2.0-py3-none-any.whl size=176720 sha256=a9805d60a9f39339eed1258649120252ef3c80f2709e52b428f039558d3f3f85\n",
            "  Stored in directory: /root/.cache/pip/wheels/a7/4f/b8/d4c6591f6ac944aaced7865b349477695f662388ad958743c7\n",
            "Successfully built mordred\n",
            "Installing collected packages: networkx, mordred\n",
            "  Attempting uninstall: networkx\n",
            "    Found existing installation: networkx 3.2.1\n",
            "    Uninstalling networkx-3.2.1:\n",
            "      Successfully uninstalled networkx-3.2.1\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "torch 2.2.1+cu121 requires nvidia-cublas-cu12==12.1.3.1; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-cuda-cupti-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-cuda-nvrtc-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-cuda-runtime-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-cudnn-cu12==8.9.2.26; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-cufft-cu12==11.0.2.54; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-curand-cu12==10.3.2.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-cusolver-cu12==11.4.5.107; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-cusparse-cu12==12.1.0.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-nccl-cu12==2.19.3; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.2.1+cu121 requires nvidia-nvtx-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed mordred-1.2.0 networkx-2.8.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Создание объекта Calculator с использованием всех доступных дескрипторов из Mordred\n",
        "calculator = Calculator(descriptors)\n",
        "\n",
        "# Преобразование SMILES-нотаций в объекты молекул и сохранение в списке molecules\n",
        "molecules_list = [Chem.MolFromSmiles(smiles) for smiles in df['smiles']]\n",
        "\n",
        "# Вычисление дескрипторов для каждой молекулы с использованием калькулятора\n",
        "descriptors_data = calculator.pandas(molecules_list)\n",
        "\n",
        "# Объединение исходного DataFrame с данными о молекулах и DataFrame с вычисленными дескрипторами\n",
        "merged_data = pd.concat([df, descriptors_data], axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WG8pA9sAzEgY",
        "outputId": "ea7e0855-75a0-48ce-8a5c-e6cab58309b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 20000/20000 [30:55<00:00, 10.78it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oDrS2WCv6RWT",
        "outputId": "e1fd643b-cc6f-4c52-acdd-2c58b5657443"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 20000 entries, 0 to 19999\n",
            "Columns: 1843 entries, mol_id to mZagreb2\n",
            "dtypes: bool(2), float64(815), int64(324), object(702)\n",
            "memory usage: 281.0+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Удаление дубликатов\n",
        "df_cleaned = merged_data.drop(columns=['mol_id'], axis=1)\n",
        "df_cleaned.drop_duplicates(subset=['smiles'], inplace=True)\n",
        "df_cleaned.reset_index(drop=True, inplace=True)\n",
        "print(df_cleaned)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ibUJmLNr6Ug1",
        "outputId": "8acfff1f-0835-4d4e-b5b8-7b74e4d13734"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                   smiles        A        B        C      mu  alpha    homo  \\\n",
            "0        OC1CC(=O)OC11CC1  2.56798  1.54104  1.16855  4.5081  68.95 -0.2628   \n",
            "1        NC(=O)C1CC2CC1O2  3.48438  1.31673  1.14460  4.3465  70.87 -0.2434   \n",
            "2      N#CC1C2C3C2C2C3N12  4.06313  1.54811  1.41644  4.7928  70.69 -0.2489   \n",
            "3       OC12COC(C=C1)C=C2  2.79725  1.77450  1.74838  2.2454  71.27 -0.2326   \n",
            "4        N=CN1C(CC1=O)C#C  2.38691  1.40907  0.96599  4.9818  76.29 -0.2548   \n",
            "...                   ...      ...      ...      ...     ...    ...     ...   \n",
            "19989   CC1=NCC(O)C(=O)N1  3.06996  1.35090  0.97329  3.2425  71.07 -0.2548   \n",
            "19990     O=COC12CC1NC2=O  3.16465  1.24088  0.98871  5.2646  63.99 -0.2632   \n",
            "19991      OC1C2CC3OC2C13  4.45415  2.05419  1.93748  2.2342  62.66 -0.2376   \n",
            "19992      N#CCC1COC2CC12  4.00621  1.03575  0.90309  4.1716  74.79 -0.2442   \n",
            "19993     CN=C1NCC(=O)N1C  3.13596  1.31143  0.94233  2.8455  77.61 -0.2309   \n",
            "\n",
            "         lumo     gap         r2  ...      SRW10     TSRW10          MW  \\\n",
            "0      0.0135  0.2764  1073.2660  ...   9.523032  60.266279  128.047344   \n",
            "1      0.0312  0.2746  1094.9083  ...   9.463509  55.838255  127.063329   \n",
            "2      0.0269  0.2758   907.0829  ...  10.801716  67.854293  118.053098   \n",
            "3     -0.0123  0.2204   881.3908  ...   9.433564  39.580333  124.052429   \n",
            "4     -0.0246  0.2302  1182.8383  ...   9.361257  39.198437  122.048013   \n",
            "...       ...     ...        ...  ...        ...        ...         ...   \n",
            "19989 -0.0250  0.2298  1179.2349  ...   8.806724  37.839725  128.058577   \n",
            "19990 -0.0169  0.2463  1139.9574  ...  10.030164  62.234591  127.026943   \n",
            "19991  0.0701  0.3077   735.6903  ...  10.254884  58.321834  112.052429   \n",
            "19992  0.0319  0.2761  1269.4140  ...   9.313889  59.442017  123.068414   \n",
            "19993  0.0041  0.2350  1229.2881  ...   8.782476  51.691682  127.074562   \n",
            "\n",
            "            AMW  WPath  WPol Zagreb1 Zagreb2  mZagreb1  mZagreb2  \n",
            "0      7.532197     78    10    52.0    64.0  3.284722  1.875000  \n",
            "1      7.059074     81     7    50.0    60.0  3.194444  1.888889  \n",
            "2      7.870207     74     6    68.0    98.0  2.027778  1.777778  \n",
            "3      7.297202     74    10    50.0    58.0  2.673611  1.875000  \n",
            "4      8.136534     90     9    42.0    49.0  4.083333  2.222222  \n",
            "...         ...    ...   ...     ...     ...       ...       ...  \n",
            "19989  7.532857     84    10    42.0    46.0  4.083333  2.027778  \n",
            "19990  9.073353     86     8    52.0    67.0  3.284722  2.000000  \n",
            "19991  7.003277     52     4    54.0    72.0  2.055556  1.555556  \n",
            "19992  6.837134     88     7    48.0    58.0  2.583333  2.055556  \n",
            "19993  7.059698     84    10    42.0    48.0  4.083333  2.138889  \n",
            "\n",
            "[19994 rows x 1842 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.drop(columns=['homo', 'lumo'], inplace=True)\n",
        "df_cleaned.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iAkC4f1_6Xvf",
        "outputId": "6d4d581e-172d-4b67-af27-8332e0947612"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 19994 entries, 0 to 19993\n",
            "Columns: 1840 entries, smiles to mZagreb2\n",
            "dtypes: bool(2), float64(813), int64(324), object(701)\n",
            "memory usage: 280.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder"
      ],
      "metadata": {
        "id": "B2yqZp2e6aaZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# выбор столбцов с типом данных bool и преобразование категориальных данных в числовые значения.\n",
        "bool_columns = df_cleaned.select_dtypes(include=['bool']).columns\n",
        "df_cleaned[bool_columns] = df_cleaned[bool_columns].astype(int)\n",
        "label_encoder = LabelEncoder()\n",
        "df_cleaned['smiles_encoded'] = label_encoder.fit_transform(df_cleaned['smiles'])\n",
        "# Удаление столбца smiles\n",
        "df_cleaned.drop(columns=['smiles'], axis=1, inplace=True)\n",
        "# Поиск данных отличных от float или int\n",
        "non_numeric_columns = df_cleaned.select_dtypes(exclude=['float', 'int']).columns.tolist()\n",
        "print(\"Следующие колонки имеют тип данных, отличный от float или int:\")\n",
        "print(non_numeric_columns)"
      ],
      "metadata": {
        "id": "S91qVeua6hRg",
        "outputId": "fdd2d2ca-acd0-454d-9f81-05a3ac7f2bf1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Следующие колонки имеют тип данных, отличный от float или int:\n",
            "['ABC', 'ABCGG', 'AATS3dv', 'AATS4dv', 'AATS5dv', 'AATS6dv', 'AATS7dv', 'AATS8dv', 'AATS3d', 'AATS4d', 'AATS5d', 'AATS6d', 'AATS7d', 'AATS8d', 'AATS3s', 'AATS4s', 'AATS5s', 'AATS6s', 'AATS7s', 'AATS8s', 'AATS3Z', 'AATS4Z', 'AATS5Z', 'AATS6Z', 'AATS7Z', 'AATS8Z', 'AATS3m', 'AATS4m', 'AATS5m', 'AATS6m', 'AATS7m', 'AATS8m', 'AATS3v', 'AATS4v', 'AATS5v', 'AATS6v', 'AATS7v', 'AATS8v', 'AATS3se', 'AATS4se', 'AATS5se', 'AATS6se', 'AATS7se', 'AATS8se', 'AATS3pe', 'AATS4pe', 'AATS5pe', 'AATS6pe', 'AATS7pe', 'AATS8pe', 'AATS3are', 'AATS4are', 'AATS5are', 'AATS6are', 'AATS7are', 'AATS8are', 'AATS3p', 'AATS4p', 'AATS5p', 'AATS6p', 'AATS7p', 'AATS8p', 'AATS3i', 'AATS4i', 'AATS5i', 'AATS6i', 'AATS7i', 'AATS8i', 'AATSC3c', 'AATSC4c', 'AATSC5c', 'AATSC6c', 'AATSC7c', 'AATSC8c', 'AATSC3dv', 'AATSC4dv', 'AATSC5dv', 'AATSC6dv', 'AATSC7dv', 'AATSC8dv', 'AATSC3d', 'AATSC4d', 'AATSC5d', 'AATSC6d', 'AATSC7d', 'AATSC8d', 'AATSC3s', 'AATSC4s', 'AATSC5s', 'AATSC6s', 'AATSC7s', 'AATSC8s', 'AATSC3Z', 'AATSC4Z', 'AATSC5Z', 'AATSC6Z', 'AATSC7Z', 'AATSC8Z', 'AATSC3m', 'AATSC4m', 'AATSC5m', 'AATSC6m', 'AATSC7m', 'AATSC8m', 'AATSC3v', 'AATSC4v', 'AATSC5v', 'AATSC6v', 'AATSC7v', 'AATSC8v', 'AATSC3se', 'AATSC4se', 'AATSC5se', 'AATSC6se', 'AATSC7se', 'AATSC8se', 'AATSC3pe', 'AATSC4pe', 'AATSC5pe', 'AATSC6pe', 'AATSC7pe', 'AATSC8pe', 'AATSC3are', 'AATSC4are', 'AATSC5are', 'AATSC6are', 'AATSC7are', 'AATSC8are', 'AATSC3p', 'AATSC4p', 'AATSC5p', 'AATSC6p', 'AATSC7p', 'AATSC8p', 'AATSC3i', 'AATSC4i', 'AATSC5i', 'AATSC6i', 'AATSC7i', 'AATSC8i', 'MATS3c', 'MATS4c', 'MATS5c', 'MATS6c', 'MATS7c', 'MATS8c', 'MATS3dv', 'MATS4dv', 'MATS5dv', 'MATS6dv', 'MATS7dv', 'MATS8dv', 'MATS3d', 'MATS4d', 'MATS5d', 'MATS6d', 'MATS7d', 'MATS8d', 'MATS3s', 'MATS4s', 'MATS5s', 'MATS6s', 'MATS7s', 'MATS8s', 'MATS3Z', 'MATS4Z', 'MATS5Z', 'MATS6Z', 'MATS7Z', 'MATS8Z', 'MATS3m', 'MATS4m', 'MATS5m', 'MATS6m', 'MATS7m', 'MATS8m', 'MATS3v', 'MATS4v', 'MATS5v', 'MATS6v', 'MATS7v', 'MATS8v', 'MATS3se', 'MATS4se', 'MATS5se', 'MATS6se', 'MATS7se', 'MATS8se', 'MATS3pe', 'MATS4pe', 'MATS5pe', 'MATS6pe', 'MATS7pe', 'MATS8pe', 'MATS3are', 'MATS4are', 'MATS5are', 'MATS6are', 'MATS7are', 'MATS8are', 'MATS3p', 'MATS4p', 'MATS5p', 'MATS6p', 'MATS7p', 'MATS8p', 'MATS3i', 'MATS4i', 'MATS5i', 'MATS6i', 'MATS7i', 'MATS8i', 'GATS3c', 'GATS4c', 'GATS5c', 'GATS6c', 'GATS7c', 'GATS8c', 'GATS3dv', 'GATS4dv', 'GATS5dv', 'GATS6dv', 'GATS7dv', 'GATS8dv', 'GATS3d', 'GATS4d', 'GATS5d', 'GATS6d', 'GATS7d', 'GATS8d', 'GATS3s', 'GATS4s', 'GATS5s', 'GATS6s', 'GATS7s', 'GATS8s', 'GATS3Z', 'GATS4Z', 'GATS5Z', 'GATS6Z', 'GATS7Z', 'GATS8Z', 'GATS3m', 'GATS4m', 'GATS5m', 'GATS6m', 'GATS7m', 'GATS8m', 'GATS3v', 'GATS4v', 'GATS5v', 'GATS6v', 'GATS7v', 'GATS8v', 'GATS3se', 'GATS4se', 'GATS5se', 'GATS6se', 'GATS7se', 'GATS8se', 'GATS3pe', 'GATS4pe', 'GATS5pe', 'GATS6pe', 'GATS7pe', 'GATS8pe', 'GATS3are', 'GATS4are', 'GATS5are', 'GATS6are', 'GATS7are', 'GATS8are', 'GATS3p', 'GATS4p', 'GATS5p', 'GATS6p', 'GATS7p', 'GATS8p', 'GATS3i', 'GATS4i', 'GATS5i', 'GATS6i', 'GATS7i', 'GATS8i', 'PNSA1', 'PNSA2', 'PNSA3', 'PNSA4', 'PNSA5', 'PPSA1', 'PPSA2', 'PPSA3', 'PPSA4', 'PPSA5', 'DPSA1', 'DPSA2', 'DPSA3', 'DPSA4', 'DPSA5', 'FNSA1', 'FNSA2', 'FNSA3', 'FNSA4', 'FNSA5', 'FPSA1', 'FPSA2', 'FPSA3', 'FPSA4', 'FPSA5', 'WNSA1', 'WNSA2', 'WNSA3', 'WNSA4', 'WNSA5', 'WPSA1', 'WPSA2', 'WPSA3', 'WPSA4', 'WPSA5', 'RNCS', 'RPCS', 'TASA', 'TPSA', 'RASA', 'RPSA', 'HybRatio', 'AXp-3d', 'AXp-4d', 'AXp-5d', 'AXp-6d', 'AXp-7d', 'AXp-3dv', 'AXp-4dv', 'AXp-5dv', 'AXp-6dv', 'AXp-7dv', 'SpAbs_Dt', 'SpMax_Dt', 'SpDiam_Dt', 'SpAD_Dt', 'SpMAD_Dt', 'LogEE_Dt', 'SM1_Dt', 'VE1_Dt', 'VE2_Dt', 'VE3_Dt', 'VR1_Dt', 'VR2_Dt', 'VR3_Dt', 'DetourIndex', 'MAXsLi', 'MAXssBe', 'MAXssssBe', 'MAXssBH', 'MAXsssB', 'MAXssssB', 'MAXsCH3', 'MAXdCH2', 'MAXssCH2', 'MAXtCH', 'MAXdsCH', 'MAXaaCH', 'MAXsssCH', 'MAXddC', 'MAXtsC', 'MAXdssC', 'MAXaasC', 'MAXaaaC', 'MAXssssC', 'MAXsNH3', 'MAXsNH2', 'MAXssNH2', 'MAXdNH', 'MAXssNH', 'MAXaaNH', 'MAXtN', 'MAXsssNH', 'MAXdsN', 'MAXaaN', 'MAXsssN', 'MAXddsN', 'MAXaasN', 'MAXssssN', 'MAXsOH', 'MAXdO', 'MAXssO', 'MAXaaO', 'MAXsF', 'MAXsSiH3', 'MAXssSiH2', 'MAXsssSiH', 'MAXssssSi', 'MAXsPH2', 'MAXssPH', 'MAXsssP', 'MAXdsssP', 'MAXsssssP', 'MAXsSH', 'MAXdS', 'MAXssS', 'MAXaaS', 'MAXdssS', 'MAXddssS', 'MAXsCl', 'MAXsGeH3', 'MAXssGeH2', 'MAXsssGeH', 'MAXssssGe', 'MAXsAsH2', 'MAXssAsH', 'MAXsssAs', 'MAXsssdAs', 'MAXsssssAs', 'MAXsSeH', 'MAXdSe', 'MAXssSe', 'MAXaaSe', 'MAXdssSe', 'MAXddssSe', 'MAXsBr', 'MAXsSnH3', 'MAXssSnH2', 'MAXsssSnH', 'MAXssssSn', 'MAXsI', 'MAXsPbH3', 'MAXssPbH2', 'MAXsssPbH', 'MAXssssPb', 'MINsLi', 'MINssBe', 'MINssssBe', 'MINssBH', 'MINsssB', 'MINssssB', 'MINsCH3', 'MINdCH2', 'MINssCH2', 'MINtCH', 'MINdsCH', 'MINaaCH', 'MINsssCH', 'MINddC', 'MINtsC', 'MINdssC', 'MINaasC', 'MINaaaC', 'MINssssC', 'MINsNH3', 'MINsNH2', 'MINssNH2', 'MINdNH', 'MINssNH', 'MINaaNH', 'MINtN', 'MINsssNH', 'MINdsN', 'MINaaN', 'MINsssN', 'MINddsN', 'MINaasN', 'MINssssN', 'MINsOH', 'MINdO', 'MINssO', 'MINaaO', 'MINsF', 'MINsSiH3', 'MINssSiH2', 'MINsssSiH', 'MINssssSi', 'MINsPH2', 'MINssPH', 'MINsssP', 'MINdsssP', 'MINsssssP', 'MINsSH', 'MINdS', 'MINssS', 'MINaaS', 'MINdssS', 'MINddssS', 'MINsCl', 'MINsGeH3', 'MINssGeH2', 'MINsssGeH', 'MINssssGe', 'MINsAsH2', 'MINssAsH', 'MINsssAs', 'MINsssdAs', 'MINsssssAs', 'MINsSeH', 'MINdSe', 'MINssSe', 'MINaaSe', 'MINdssSe', 'MINddssSe', 'MINsBr', 'MINsSnH3', 'MINssSnH2', 'MINsssSnH', 'MINssssSn', 'MINsI', 'MINsPbH3', 'MINssPbH2', 'MINsssPbH', 'MINssssPb', 'GeomDiameter', 'GeomRadius', 'GeomShapeIndex', 'GeomPetitjeanIndex', 'GRAV', 'GRAVH', 'GRAVp', 'GRAVHp', 'Kier3', 'Mor01', 'Mor02', 'Mor03', 'Mor04', 'Mor05', 'Mor06', 'Mor07', 'Mor08', 'Mor09', 'Mor10', 'Mor11', 'Mor12', 'Mor13', 'Mor14', 'Mor15', 'Mor16', 'Mor17', 'Mor18', 'Mor19', 'Mor20', 'Mor21', 'Mor22', 'Mor23', 'Mor24', 'Mor25', 'Mor26', 'Mor27', 'Mor28', 'Mor29', 'Mor30', 'Mor31', 'Mor32', 'Mor01m', 'Mor02m', 'Mor03m', 'Mor04m', 'Mor05m', 'Mor06m', 'Mor07m', 'Mor08m', 'Mor09m', 'Mor10m', 'Mor11m', 'Mor12m', 'Mor13m', 'Mor14m', 'Mor15m', 'Mor16m', 'Mor17m', 'Mor18m', 'Mor19m', 'Mor20m', 'Mor21m', 'Mor22m', 'Mor23m', 'Mor24m', 'Mor25m', 'Mor26m', 'Mor27m', 'Mor28m', 'Mor29m', 'Mor30m', 'Mor31m', 'Mor32m', 'Mor01v', 'Mor02v', 'Mor03v', 'Mor04v', 'Mor05v', 'Mor06v', 'Mor07v', 'Mor08v', 'Mor09v', 'Mor10v', 'Mor11v', 'Mor12v', 'Mor13v', 'Mor14v', 'Mor15v', 'Mor16v', 'Mor17v', 'Mor18v', 'Mor19v', 'Mor20v', 'Mor21v', 'Mor22v', 'Mor23v', 'Mor24v', 'Mor25v', 'Mor26v', 'Mor27v', 'Mor28v', 'Mor29v', 'Mor30v', 'Mor31v', 'Mor32v', 'Mor01se', 'Mor02se', 'Mor03se', 'Mor04se', 'Mor05se', 'Mor06se', 'Mor07se', 'Mor08se', 'Mor09se', 'Mor10se', 'Mor11se', 'Mor12se', 'Mor13se', 'Mor14se', 'Mor15se', 'Mor16se', 'Mor17se', 'Mor18se', 'Mor19se', 'Mor20se', 'Mor21se', 'Mor22se', 'Mor23se', 'Mor24se', 'Mor25se', 'Mor26se', 'Mor27se', 'Mor28se', 'Mor29se', 'Mor30se', 'Mor31se', 'Mor32se', 'Mor01p', 'Mor02p', 'Mor03p', 'Mor04p', 'Mor05p', 'Mor06p', 'Mor07p', 'Mor08p', 'Mor09p', 'Mor10p', 'Mor11p', 'Mor12p', 'Mor13p', 'Mor14p', 'Mor15p', 'Mor16p', 'Mor17p', 'Mor18p', 'Mor19p', 'Mor20p', 'Mor21p', 'Mor22p', 'Mor23p', 'Mor24p', 'Mor25p', 'Mor26p', 'Mor27p', 'Mor28p', 'Mor29p', 'Mor30p', 'Mor31p', 'Mor32p', 'MDEC-11', 'MDEC-12', 'MDEC-13', 'MDEC-14', 'MDEC-22', 'MDEC-23', 'MDEC-24', 'MDEC-33', 'MDEC-34', 'MDEC-44', 'MDEO-11', 'MDEO-12', 'MDEO-22', 'MDEN-11', 'MDEN-12', 'MDEN-13', 'MDEN-22', 'MDEN-23', 'MDEN-33', 'MOMI-X', 'MOMI-Y', 'MOMI-Z', 'PBF']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.to_csv('/content/drive/MyDrive/cleaned_data', index=False)"
      ],
      "metadata": {
        "id": "oU6F3tG46dxp"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}